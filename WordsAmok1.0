var cw = 600;
var ch = 600;

var gameState = 0;

var columns = [];

var columnNum = 7;

var balls = [];

var ballY = 0;

var wheelLetters = ["r", "s", "t", "l", "n"];

var comVowel = ["a", "e", "i"];

var anyVowel = ["a", "e", "i", "o", "u"];

var alphabetOne = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

var alphabetTwo = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

var alphabetThree = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

var alphabetFour = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

var allLetters = [wheelLetters, comVowel, anyVowel, alphabetOne, alphabetTwo, alphabetThree, alphabetFour];

var a = 0;

var b = 0;

var c = 0;

var index = 0;

var doubleRubble = [];

var myst = 0;

var checker = [];

var dictionary = [];

var checkVal = 0;

var flyingWords = [];

var randX = 0;

var alp = 255;

var larkin;
var larkinFB;
var larkinFF;
var title;
var subTitle;
var ruleButton;
var runButton;
var rightMargin;
var resetButton;
var pauseButton;
var pauseScreen;
var gameOver;

var opTime = 0;

var tiTime = 0;

var tiX = 250;
var tiY = 440;
var tiW = 100;
var tiH = 40;

var larkJaw = 0;

var score = 0;

function preload() {

  dictionary = loadStrings('dictionary.csv');
  fontRegular = loadFont("texgyreschola-regular.otf");
  fontItalic = loadFont("texgyreschola-italic.otf");
  larkin = loadImage("LarkinBackgd.jpg");
  larkinFB = loadImage("LarkinFB.jpg");
  larkinFF = loadImage("LarkinFF.png");
  title = loadImage("WaTitleW1.png");
  subTitle = loadImage("subTitle.png");
  ruleButton = loadImage("ruleButton.png");
  runButton = loadImage("runButton.png");
  rulesPage = loadImage("rulesPage.jpg");
  rightMargin = loadImage("RightMargin.png");
  leftMargin = loadImage("LeftMargin.png");
  resetButton = loadImage("resetButton.png");
  pauseButton = loadImage("pauseButton.png");
  pauseScreen = loadImage("pauseScreen.jpg");
  gameOver = loadImage("gameOver.jpg");
  
}

function setup() {
  createCanvas(cw, ch);
  allLetters = shuffle(allLetters);
  image(larkin, 0, 0);

  for (i = 0; i < columnNum; i++) {
  columns.push(new Column(i+1));
  columns[i].rubble = 0;
  columns[i].letters = allLetters[i];
  }
  
  textFont(fontRegular);
  
}

function draw() {
  if (gameState === 0) {openingSeq();}
  else if (gameState == 4) {image(pauseScreen, 0, 0)}
  else if (gameState == 5) {
     image(gameOver, 0, 0);
  score = 0;
  for (var z = 0; z < columnNum; z++) {
    columns[z].deadTiles.length = 0;
    columns[z].tiles.length = 0;
    opTime = 596;
  }
  }
  else if (gameState == 3) {
    image(rulesPage, 0, 0);
  }
  else if (gameState == 1) {
    
  image(larkin, 0, 0);
  image(rightMargin, 465, 0);
  image(leftMargin, 0, 0);
  
  allLetters = shuffle(allLetters);
  
  for (i = 0; i < columnNum; i++){
  columns[i].run();
  columns[i].RubbleCheck();
  columns[i].deadRun();
  
  if (frameCount == 1) {
    columns[i].AddNewTile();
  }
  }
  
  CleanUpTiles();
  
  wordMationDisplay();
  
  scoreDisplay();

}}

function Ball(xPos, yPos, letterSet, colorConstant) {
  this.x = xPos;
  this.y = ballY;
  this.speed = .75;
  this.state = 0;
  this.letter = letterSet[index];
  this.letterSet = letterSet;
  this.checkState = 0;
  this.colorConst = colorConstant;
  
  this.fall = function(rubble){
  this.y += this.speed;
  
    if (this.y > ch - 25 - rubble && this.state === 0) {
      (this.y = ch - 25 - rubble);
    }

    if (this.y == ch - 25 - rubble && this.state === 0) {
    this.speed = 0;
    this.state = 1;
}
    }
    
  this.display = function(){
   if (this.state === 0) {
    index = floor(random(this.letterSet.length));
    
    noStroke();
    fill(0);
    ellipse(this.x, this.y, 55, 55);
    
    stroke(255);
    strokeWeight(2);
    noFill();
    arc (this.x, this.y, 50, 50, TWO_PI-QUARTER_PI, TWO_PI-(PI/12));
    
    
    if (this.checkState === 0) {
    fill(255, 255, 185+this.colorConst, 255);}
    
    if (this.checkState === 1) {
    fill(255, 220, 220);}
    
    if (this.checkState === 2) {
    fill(210, 210, 255);}
    
    if (this.checkState === 3) {
    fill(200, 255, 200);}
    
    noStroke();
    ellipse(this.x, this.y, 45, 45);
    
    fill(0);
    textSize(36);
    textAlign(CENTER);
    textStyle(BOLD);
    text(this.letter, this.x, this.y + 9);
    
  } else if (this.state == 1) {
    noStroke();
    fill(0);
    ellipse(this.x, this.y, 55, 55);
    
    stroke(255);
    strokeWeight(2);
    noFill();
    arc (this.x, this.y, 50, 50, TWO_PI-QUARTER_PI, TWO_PI-(PI/12));
    
    noStroke();
    fill(185);
    ellipse(this.x, this.y, 45, 45);
  }
  }
  
  this.deadDisplay = function(){
    if (this.state == 1) {
    index = floor(random(this.letterSet.length));
    fill(185);
    ellipse(this.x, this.y, 50, 50);
  }
  }
}

function Column(pos) {
  this.xPos = pos * (columnNum * 9) - 10;
  this.yPos;
  this.rubble;
  this.tiles = [];
  this.deadTiles = [];
  this.letters = [];

}

Column.prototype.AddNewTile = function() {
  this.yPos = random (-2, 2);
  this.colorConstant = random (30);
  index = floor(random(this.letters.length));
  this.tiles.push(new Ball(this.xPos, this.yPos, this.letters, this.colorConstant));
};

Column.prototype.run = function() {
  for (var i = 0; i < this.tiles.length; i++) {
    this.tiles[i].fall(this.rubble);
    this.tiles[i].display();
  }
};

Column.prototype.deadRun = function() {
  for (var i = 0; i < this.deadTiles.length; i++) {
    this.deadTiles[i].display();
  }
};

Column.prototype.RubbleCheck = function() {
for (var i = 0; i < this.tiles.length; i++) {
  if (this.tiles[i].state == 1) {
  append(this.deadTiles, this.tiles[0]);
  this.tiles.splice(0, 1);
  checker.length = 0; // this is a sloppy fix!
  }
}
  this.rubble = this.deadTiles.length * 50;
  if (this.rubble >= 550) {
    gameState = 5;
  }
};

function runCheck(word){
  if (dictionary.indexOf(word) >= 0 && checker.length >= 2) {
    return true;
    } else {
      return false;
    }
  }

function CleanUpTiles() {
  if (checkVal == 1) {
    if (checker.length > 5) {
      score += 20;
      for (var k = 0; k < columnNum; k++) {
        columns[k].deadTiles.length = 0;
      }
    }
    if (checker.length > 4) {
      score += 20;
    for (var l = 0; l < columnNum; l++) {
      columns[l].deadTiles.splice((columns[l].deadTiles.length)- 1, 1);
    }
    }
    if (checker.length > 3) {
      score += 20;
    for (var m = 0; m < columnNum; m++) {
      for(var n = 0; n < columns[m].tiles.length; j++){
      columns[m].tiles.splice(0, 1);
    }
    //columns[m].AddNewTile();
    }
    }
    
    if (checker.length >= 2) {
      
    /*for (var ii = 0; ii < columnNum; ii++) {
    for (var jj = 0; jj < columns[ii].tiles.length; jj++)
    {if (columns[ii].tiles[jj].checkState != 3) {
       columns[ii].tiles[jj].speed = 5;
  }
    }
  }*/
  score += 20;
    wordMation(mouseX, mouseY, join (checker, ''));  
  for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++){
      if (columns[i].tiles[j].checkState === 0) {
        columns[i].tiles[j].speed = 5;
      }
     if (columns[i].tiles[j].checkState == 3) {
       columns[i].tiles.splice(j, 1);
       }
     }
         columns[i].AddNewTile();
    }
    checkVal = 0;
    }
    
    checker.length = 0;
  }
  
    var q = 0;
    
    for (var o = 0; o < columnNum; o++) {
      q += columns[o].tiles.length;
    }
    
    if (q < 1) {
      for (var p = 0; p < columnNum; p++) {
       /* if (columns[p].tiles.length > 0) {
          append(columns[p].deadTiles, columns[p].tiles[0]);
          columns[p].tiles.splice(0, 1);
        }*/
        columns[p].AddNewTile();
      }
    }
}

function refreshTiles() {
  for (var i=0; i<columnNum; i++) {
    columns[i].AddNewTile();
  }
}

function wordMation(posX, posY, word) {

  flyingWords.push(new flyingWord(posX, posY, word));
  randX = random(-5, 5);

}

function wordMationDisplay() {
  textFont(fontItalic);
  textSize(48);
  fill(240, 20, 240, alp);
    
  for (var i=0; i<flyingWords.length ; i++) {
    text(flyingWords[i].word, flyingWords[i].x, flyingWords[i].y);
    
    flyingWords[i].x += randX;
    flyingWords[i].y -= 3;
    alp -= 5;
    
    if (flyingWords[i].y <= 0) {
      flyingWords.length = 0;
      alp = 255;
    }
  }
  textFont(fontRegular);
}

function flyingWord(x, y, word) {
  this.x = x;
  this.y = y;
  this.word = word;
}

function openingSeq() {
  opTime++;
  
  image(larkinFB, 0, 0);
  image(larkinFF, 266, 418 + larkJaw);
  
  if (opTime > 150 && opTime < 240) {
    jawDown();
  }
  if (opTime > 156 && opTime <234){
    textFont(fontItalic);
    textSize(30);
    textAlign(CENTER);
    stroke(0);
    strokeWeight(2);
    fill(255);
    text("gewgaw", 337, 470);
  }
  if (opTime > 240 && opTime < 300) {
    jawUp();
  }
  if (opTime > 300 && opTime < 390) {
    jawDown();
  }
  if (opTime > 306 && opTime < 384){
    textFont(fontItalic);
    textSize(30);
    textAlign(CENTER);
    stroke(0);
    strokeWeight(2);
    fill(255);
    text("brobdingnagian", 337, 470);
  } 
  if (opTime > 390 && opTime < 450) {
    jawUp();
  }
    if (opTime > 450 && opTime < 480) {
    jawDown();
  }
    if (opTime > 480) {
    jawUp();
  }
  if (opTime > 456){
    
    titleDisplay();
    
  } 
  if (opTime > 620){
    buttonDisplay();
  }
}

function jawDown() {
  if (larkJaw < 60) {
    larkJaw += 12;
  }
}

function jawUp() {
  if (larkJaw > 0) {
    larkJaw -= 12;
  }
}

function titleDisplay() {
  if (tiTime < 45) {
    image(title, map(tiTime, 0, 45, tiX, 50), map(tiTime, 0, 45, tiY, 100), map(tiTime, 0, 45, tiW, 500), map(tiTime, 0, 45, tiH, 200));
  } else { 
    fill(0, 0, 0, 90);
    rect(0, 0, 600, 600);
    image(title, 50, 100);
  }
  
  if (tiTime > 90) {
  image(subTitle, 50, 230);
  }
  tiTime++;
}

function buttonDisplay() {
  image(ruleButton, 67, 400);
  image(runButton, 333, 400);

}

function scoreDisplay() {
  textFont(fontRegular);
  textSize(24);
  fill(255);
  text("SCORE:", 535, 50);
  text(score, 535, 80);
  image(resetButton, 485, 100);
  image(pauseButton, 485, 225);
}

/*function gameOver() {
  image(gameOver, 0, 0);
  score = 0;
  for (var i = 0; i < columnNum; i++) {
    columns[i].deadTiles.length = 0;
    columns[i].tiles.length = 0;
  }
}*/


function mousePressed() {
  if (gameState == 5) {
    gameState = 0;
  }
  if (gameState === 0 && opTime < 596) {gameState = 1;}
  if (gameState === 0 && opTime > 596 && mouseX > 67 && mouseX < 267 && mouseY > 400 && mouseY < 500) {gameState = 2;}
  if (gameState === 0 && opTime > 596 && mouseX > 333 && mouseX < 533 && mouseY > 400 && mouseY < 500) {gameState = 1;}
  
  if (gameState == 3) {gameState = 0}
  
  if (gameState == 4) {gameState = 1}
  
  if (gameState == 1) {
  
  for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++) {
    if (dist(mouseX, mouseY, columns[i].tiles[j].x, columns[i].tiles[j].y) <= 25) 
    {
     if (columns[i].tiles[j].checkState === 0) {
       columns[i].tiles[j].checkState = 1;
       checker.push(columns[i].tiles[j].letter);
     }

    if (columns[i].tiles[j].checkState == 2) {
      if (runCheck(join(checker, '')) === true) {
        print("true");
        for (var k = 0; k < columnNum; k++) {
          for (var l = 0; l < columns[k].tiles.length; l++) {
         if (columns[k].tiles[l].checkState == 2) {
           columns[k].tiles[l].checkState = 3;
         }
         }
        }
        checkVal = 1;
      } else if (runCheck(join(checker, '')) === false){
          print("false");
         for (var m = 0; m < columnNum; m++) {
          for (var n = 0; n < columns[m].tiles.length; n++) {
           columns[m].tiles[n].checkState = 0;
          }
        }
          checker.length = 0;
          checkVal = 0;
        }
    
      }
     } 
    }
  }
  if (mouseX > 485 && mouseX < 585 && mouseY > 100 && mouseY < 200) {
    checker.length = 0;
    for (var i = 0; i < columnNum; i++) {
      for (var j = 0; j < columns[i].tiles.length; j++){
        columns[i].tiles[j].checkState = 0;
      }
    }
  }
  }
}

function mouseReleased() {
  if (gameState == 2) {gameState = 3};
  
    for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++){
      if (columns[i].tiles[j].checkState == 1) {
        columns[i].tiles[j].checkState = 2;
      }
      
  if (gameState == 1 && mouseX > 485 && mouseX < 585 && mouseY > 225 && mouseY < 300) {
  gameState = 4;}
}
}
}
